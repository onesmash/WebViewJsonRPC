;(function() {
	if(window.jsbridge) {
		return;
	}

	var CustomProtocolScheme = 'jsonrpc';
    var jsonRPCTag = 'jsonrpc';
    var jsonRPCResultTag = 'result';
    var jsonRPCErrorTag = 'error';
    var jsonRPCIdTag = 'id';
    var jsonRPCVer = '2.0';

	//var iframe =  document.createElement('iframe');
	//iframe.style.display = 'none';
	//document.documentElement.appendChild(iframe);
    var iframe = null;

	var _current_id = 0;

	var _callbacks = {};

	var jsonRPC = {};

	function doCall(request, success_cb, error_cb) {
        if(!iframe) return;

        if (jsonRPCIdTag in request && typeof success_cb !== 'undefined') {
            _callbacks[request.id] = { success_cb: success_cb, error_cb: error_cb }; 
        } 

        iframe.src = CustomProtocolScheme + '://' + encodeURIComponent(JSON.stringify(request));
	}

    function doClose() {
        delete window.jsbridge;
    }
    
    jsonRPC.onInit = function() {
        if(iframe) return;
        iframe =  document.createElement('iframe');
        iframe.style.display = 'none';
        document.documentElement.appendChild(iframe);
    }

	jsonRPC.call = function(method, params, success_cb, error_cb) {
        var request = {
				jsonrpc : jsonRPCVer,
                method  : method, 
                params  : params, 
                id      : _current_id++  
            }; 
        doCall(request, success_cb, error_cb);
	}

	jsonRPC.notify = function(method, params) {
		var request = { 
				jsonrpc : jsonRPCVer,
                method  : method, 
                params  : params, 
            }; 
        doCall(request, null, null);
    };

    jsonRPC.close = function() {
        doClose();
    }

    jsonRPC.onMessage = function(message) {
    	var response = message;
        
        if(typeof response === 'object'
            && jsonRPCTag in response
            && response.jsonrpc === jsonRPCVer) {
            if(jsonRPCResultTag in response && _callbacks[response.id]) {
                var success_cb = _callbacks[response.id].success_cb;
                delete _callbacks[response.id];
                success_cb(response.result);
                return;
            } else if(jsonRPCErrorTag in response && _callbacks[response.id]) {
                
                var error_cb = _callbacks[response.id].error_cb;
                delete _callbacks[response.id];
                error_cb(response.error);
                return;
            }
        }
    }
    
    jsonRPC.echo = function(message) {
        alert(message);
    }

    window.jsbridge = jsonRPC;
    
})();